// –ó–∞–≥–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –≤—Å—ñ—Ö —ñ–≥–æ—Ä
let currentA = 0;
let currentB = 0;
let currentAnswer = 0;
let currentQuestion = 0;
let correctAnswers = 0;
let totalQuestions = 10;
let currentGame = '';
let isReviewMode = false;
let currentMistakes = [];
let maxNumber = 10;
let currentLevel = 1;
let lastSubmittedAnswer = null; // –î–æ–¥–∞—î–º–æ –∑–º—ñ–Ω–Ω—É –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ

// –ó–∞–≥–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
function getMaxNumber(level) {
    switch(level) {
        case 1: return 4;  // –õ–µ–≥–∫–∏–π: 1-4
        case 2: return 7;  // –°–µ—Ä–µ–¥–Ω—ñ–π: 1-7
        case 3: return 10; // –°–∫–ª–∞–¥–Ω–∏–π: 1-10
        default: return 4;
    }
}

function updateProgress(progressFillId, progressTextId) {
    const progress = (currentQuestion / totalQuestions) * 100;
    document.getElementById(progressFillId).style.width = `${progress}%`;
    document.getElementById(progressTextId).textContent = `${currentQuestion}/${totalQuestions}`;
}

function showFinalResults() {
    document.getElementById('final-results').classList.remove('hidden');
    
    const score = (correctAnswers / totalQuestions) * 100;
    document.getElementById('final-score').textContent = 
        `–¢–≤—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${correctAnswers} –∑ ${totalQuestions} –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π (${score.toFixed(1)}%)`;
    
    let finalMessage = '';
    if (score === 100) {
        finalMessage = '–í—ñ–¥–º—ñ–Ω–Ω–æ! –¢–∏ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π —á–µ–º–ø—ñ–æ–Ω! üèÜ';
    } else if (score >= 70) {
        finalMessage = '–î–æ–±—Ä–µ! –ü—Ä–æ–¥–æ–≤–∂—É–π —Ç—Ä–µ–Ω—É–≤–∞—Ç–∏—Å—è! üëç';
    } else {
        finalMessage = '–ù–µ –∑–∞—Å–º—É—á—É–π—Å—è! –ü—Ä–∞–∫—Ç–∏–∫–∞ —Ä–æ–±–∏—Ç—å –º–∞–π—Å—Ç—Ä–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑! üí™';
    }
    document.getElementById('final-message').textContent = finalMessage;
}

function returnToMenu() {
    // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –≤—Å—ñ —ñ–≥—Ä–æ–≤—ñ —Å–µ–∫—Ü—ñ—ó
    document.querySelectorAll('.game-section').forEach(section => {
        section.classList.add('hidden');
    });
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –≤–∏–±–æ—Ä—É –≥—Ä–∏
    document.getElementById('game-selection').classList.remove('hidden');
    
    // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –≥—Ä–∏
    currentGame = '';
    currentQuestion = 0;
    correctAnswers = 0;
    isReviewMode = false;
    currentMistakes = [];
    lastSubmittedAnswer = null; // –°–∫–∏–¥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å
}

function saveMistake(gameType, mistake) {
    let mistakes = JSON.parse(localStorage.getItem(`${gameType}_mistakes`) || '[]');
    mistakes.push(mistake);
    localStorage.setItem(`${gameType}_mistakes`, JSON.stringify(mistakes));
}

function setButtonsEnabled(enabled, gameId) {
    const buttons = document.querySelectorAll(`#${gameId} .answer-button`);
    buttons.forEach(btn => btn.disabled = !enabled);
}

function showModal(message) {
    document.getElementById('modal-message').textContent = message;
    document.getElementById('modal').classList.remove('hidden');
}

function closeModal() {
    document.getElementById('modal').classList.add('hidden');
}

// –ù–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥—É–±–ª—é–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
function isDuplicateAnswer(answer) {
    if (lastSubmittedAnswer === answer) {
        showModal('–í–∏ –≤–∂–µ –¥–∞–≤–∞–ª–∏ —Ç–∞–∫—É —Å–∞–º—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ü–µ –ø–∏—Ç–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å!');
        return true;
    }
    lastSubmittedAnswer = answer;
    return false;
}

function startMistakeReview(gameType) {
    isReviewMode = true;
    currentMistakes = JSON.parse(localStorage.getItem(`${gameType}_mistakes`) || '[]');
    
    if (currentMistakes.length === 0) {
        showModal('–£ –≤–∞—Å –Ω–µ–º–∞—î –ø–æ–º–∏–ª–æ–∫ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É.');
        return;
    }
    
    // –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏
    currentQuestion = 0;
    correctAnswers = 0;
    lastSubmittedAnswer = null; // –°–∫–∏–¥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –≥—Ä—É –≤ —Ä–µ–∂–∏–º—ñ –ø–µ—Ä–µ–≥–ª—è–¥—É –ø–æ–º–∏–ª–æ–∫
    switch(gameType) {
        case 'multiplication':
            startMultiplicationGame(currentLevel);
            break;
        case 'division':
            startDivisionGame(currentLevel);
            break;
        case 'addition':
            startAdditionGame();
            break;
        case 'subtraction':
            startSubtractionGame();
            break;
        case 'comparison':
            startComparisonGame();
            break;
    }
}

function showStatistics() {
    const statisticsSection = document.getElementById('statistics');
    
    // –Ø–∫—â–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∂–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è, —Ö–æ–≤–∞—î–º–æ —ó—ó
    if (!statisticsSection.classList.contains('hidden')) {
        statisticsSection.classList.add('hidden');
        return;
    }
    
    // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –≤—Å—ñ —ñ–≥—Ä–æ–≤—ñ —Å–µ–∫—Ü—ñ—ó
    document.querySelectorAll('.game-section').forEach(section => {
        section.classList.add('hidden');
    });
    
    // –ü–æ–∫–∞–∑—É—î–º–æ —Å–µ–∫—Ü—ñ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    statisticsSection.classList.remove('hidden');
    
    // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–æ–∂–Ω–æ—ó –≥—Ä–∏
    updateMistakesDisplay('multiplication');
    updateMistakesDisplay('division');
    updateMistakesDisplay('addition');
    updateMistakesDisplay('subtraction');
    updateMistakesDisplay('comparison');
}

function updateMistakesDisplay(gameType) {
    const mistakes = JSON.parse(localStorage.getItem(`${gameType}_mistakes`) || '[]');
    const container = document.getElementById(`${gameType}-mistakes`);
    container.innerHTML = '';
    
    if (mistakes.length === 0) {
        container.innerHTML = '<p>–ù–µ–º–∞—î –ø–æ–º–∏–ª–æ–∫</p>';
        return;
    }
    
    const uniqueMistakes = {};
    mistakes.forEach(mistake => {
        const key = `${mistake.a}${mistake.operation}${mistake.b}`;
        if (!uniqueMistakes[key]) {
            uniqueMistakes[key] = {
                count: 0,
                correctAnswer: mistake.correctAnswer,
                userAnswers: []
            };
        }
        uniqueMistakes[key].count++;
        uniqueMistakes[key].userAnswers.push(mistake.userAnswer);
    });
    
    Object.entries(uniqueMistakes).forEach(([key, data]) => {
        const div = document.createElement('div');
        div.className = 'mistake-item';
        div.innerHTML = `
            <p>${key} = ${data.correctAnswer}</p>
            <p>–ü–æ–º–∏–ª–æ–∫: ${data.count}</p>
            <p>–í–∞—à—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${data.userAnswers.join(', ')}</p>
        `;
        container.appendChild(div);
    });
} 